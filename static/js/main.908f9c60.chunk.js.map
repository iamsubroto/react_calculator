{"version":3,"sources":["components/Button.js","components/Buttons.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Button","handleClick","btnClick","text","this","props","react_default","a","createElement","className","onClick","bind","Component","Buttons","Fragment","Button_Button","Calculator","state","expression","total","_this","setState","math","eval","Buttons_Buttons","App","components_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.908f9c60.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Button extends Component {\r\n\r\n  handleClick = (btnClick, text) => {\r\n    btnClick(text);\r\n  }  \r\n  render() {\r\n      const { text } = this.props;\r\n    return (\r\n            <div className=\"calculator__button\" onClick={this.handleClick.bind(this,this.props.btnClick, text)}>{this.props.text}</div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Button from './Button'\r\n\r\nexport default class Buttons extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n            <Button className=\"calculator__button\" text=\"7\" btnClick={this.props.btnClick} />\r\n            <Button className=\"calculator__button\" text=\"8\" btnClick={this.props.btnClick} />\r\n            <Button className=\"calculator__button\" text=\"9\" btnClick={this.props.btnClick} />\r\n            <Button className=\"calculator__button\" text=\"/\" btnClick={this.props.btnClick} />\r\n            <Button className=\"calculator__button\" text=\"4\" btnClick={this.props.btnClick} />\r\n            <Button className=\"calculator__button\" text=\"5\" btnClick={this.props.btnClick} />\r\n            <Button className=\"calculator__button\" text=\"6\" btnClick={this.props.btnClick} />\r\n            <Button className=\"calculator__button\" text=\"-\" btnClick={this.props.btnClick} />\r\n            <Button className=\"calculator__button\" text=\"1\" btnClick={this.props.btnClick} />\r\n            <Button className=\"calculator__button\" text=\"2\" btnClick={this.props.btnClick} />\r\n            <Button className=\"calculator__button\" text=\"3\" btnClick={this.props.btnClick} />\r\n            <Button className=\"calculator__button\" text=\"x\" btnClick={this.props.btnClick} />\r\n            <Button className=\"calculator__button\" text=\"AC\" btnClick={this.props.btnClick} />\r\n            <Button className=\"calculator__button\" text=\"0\" btnClick={this.props.btnClick} />\r\n            <Button className=\"calculator__button\" text=\"=\" btnClick={this.props.btnClick} />\r\n            <Button className=\"calculator__button\" text=\"+\" btnClick={this.props.btnClick} />\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Buttons from './Buttons'\r\nimport math from 'mathjs' \r\n\r\nclass Calculator extends Component {\r\n    state = {\r\n      expression:'',\r\n      total: 0\r\n    }\r\n    handleClick = (text) => {\r\n\r\n      // because mathjs doesnt know x meaans multiply \r\n      // so we check first if x symbol comes.   we hardcode that and replace to * symbol\r\n      switch(text) {\r\n        case \"AC\": \r\n        this.setState({expression: '', total: 0});\r\n        break;\r\n        \r\n        case \"x\": \r\n          this.setState({\r\n            expression: this.state.expression + \" * \"\r\n          });\r\n          break;\r\n\r\n          case \"=\": \r\n            let total = math.eval(this.state.expression);\r\n            this.setState({\r\n              total\r\n            });\r\n            break;\r\n\r\n          case \"+\": \r\n            this.setState({\r\n              expression: this.state.expression + \" + \"\r\n            });\r\n            break;\r\n\r\n          case \"/\":\r\n          this.setState({\r\n            expression: this.state.expression + \" / \"\r\n          });\r\n          break;\r\n\r\n          case \"-\":\r\n          this.setState({\r\n            expression: this.state.expression + \" - \"\r\n          });\r\n          break;\r\n\r\n          default:\r\n            this.setState({\r\n              expression: this.state.expression + text\r\n            });\r\n      }\r\n    }\r\n  render() {\r\n    return (\r\n        <div className=\"calculator\">\r\n            <div className=\"calculator__screen\">\r\n            <span className=\"expression\">{this.state.expression}</span>\r\n            <span className=\"total\">{this.state.total}</span>\r\n            </div>\r\n            <Buttons btnClick={this.handleClick} />\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Calculator;","import React, { Component } from 'react';\nimport Calculator from './components/Calculator'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}